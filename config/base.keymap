#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#if CONFIG_WIRELESS
  #include <dt-bindings/zmk/bt.h>
  #define _BT_SEL_KEYS_ &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_CLR
#else
  #define _BT_SEL_KEYS_ &trans &trans &trans &trans &trans
#endif

#include "../zmk-nodefree-config/helper.h"
#include "../zmk-nodefree-config/international_chars/danish.dtsi"

#define DEF 0
#define NAV 1
#define FN 2
#define NUM 3
#define SYS 4
#define UC 5
//#define MOUSE 6

#include "combos.dtsi"
#include "extra_keys.dtsi"

#define XXX &none
#define ___ &trans

/* Global settings */

#define QUICK_TAP_MS 175

&sk { // sticky keys config
  release-after-ms = <900>;
  quick-release;
};

&sl { // sticky layer config
  ignore-modifiers;
};

&lt { // layer tap config
  flavor = "balanced";
  tapping-term-ms = <200>;
  quick-tap-ms = <QUICK_TAP_MS>;
};

/* Homerow mods */

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4 // left hand
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4 // right hand
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2 // thumbs

#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS) \
    ZMK_BEHAVIOR(NAME, hold_tap, \
                 flavor = "balanced"; \
                 tapping-term-ms = <280>; \
                 quick-tap-ms = <QUICK_TAP_MS>; \
                 require-prior-idle-ms = <150>; \
                 bindings = <HOLD>, <TAP>; \
                 hold-trigger-key-positions = <TRIGGER_POS>; \
                 hold-trigger-on-release; \
    )
MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS) // left hand HRMs
MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS) // right hand HRMs

MAKE_HRM(hml_repeat, &kp, &key_repeat, KEYS_R THUMBS) // used for HRM-combo
MAKE_HRM(hmr_lpar_lt, &kp, &lpar_lt, KEYS_L THUMBS) //
MAKE_HRM(hmr_rpar_gt, &kp, &rpar_rt, KEYS_L THUMBS) //

/* Nav cluster */

// long-tap action on hold, short-tap action on all interrupts
#define MT_CORE \
  flavor = "tap-preferred"; \
  tapping-term-ms = <220>; \
  quick-tap-ms = <220>; \
  hold-trigger-key-positions = <0>;

  &mt { MT_CORE };
  ZMK_BEHAVIOR(mt_home, hold_tap, bindings = <&masked_home>. <&kp>; MT_CORE)
  ZMK_BEHAVIOR(mt_end, hold_tap, bindings = <&masked_end>. <&kp>; MT_CORE)

  #define NAV_LEFT &mt_home 0 LEFT // tap: left | long-tap: beginning of line
  #define NAV_RIGHT &mt_end 0 RIGHT // tap: right | long-tap: end of line
  #define NAV_UP &mt LC(HOME) UP // tap: up | long-tap: beginning of document
  #define NAV_DOWN &mt LC(END) DOWN // tap: down | long-tap end of document
  #define NAV_BSPC &mt LC(BSPC) BSPC // tap: backspace | long-tap: delete word backward
  #define NAV_DEL &mt LC(DEL) DEL // tap: delete | long-tap: delete word forward

  // mask CTRL when holding left/right to avoid accidental jumps to beginning/end of document or line
  #define MASK_MODS(NAME, MODS, BINDING) \
    ZMK_BEHAVIOR(NAME, mod_morp, \
                 bindings = <MODS>. <BINDING>; \
                 mods = <MODS>; \
    )
  MASK_MODS(masked_home, (MOD_LCTL), &kp home)
  MASK_MODS(masked_end, (MOD_LCTL), &kp end)

  /* Caps-word, num-word */



